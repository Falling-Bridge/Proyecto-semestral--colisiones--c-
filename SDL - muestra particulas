#include <SDL2/SDL.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int detectararchivo(FILE *archivo) {
    char caracter = fgetc(archivo);

    if (caracter == 'c') {
        return 1;
    } else if (caracter == 'b') {
        return 2;
    } else if (caracter == 't') {
        return 3;
    } else {
        printf("No es un arhivo de tipo csv, binario o txt.");
        return -1;
    }
}

int** leercsv(FILE *archivo, int *contadorparticulas, int ***informacionparticulas) {
    (*informacionparticulas) = (int**)malloc(sizeof(int*));
    (*informacionparticulas)[0] = (int*)malloc(sizeof(int)*3);

    while ((!feof(archivo))  && fscanf(archivo, "%d,%d,%d,", &(*informacionparticulas)[*contadorparticulas][0], &(*informacionparticulas)[*contadorparticulas][1],
                                         &(*informacionparticulas)[*contadorparticulas][2]) == 3) {
        (*informacionparticulas)[*contadorparticulas][2] %= 8;
        (*contadorparticulas)++;
        if (feof(archivo)){
            break;
        }
        (*informacionparticulas) = realloc((*informacionparticulas), sizeof(int*) * ((*contadorparticulas) + 1));
        (*informacionparticulas)[*contadorparticulas] = (int*)malloc(sizeof(int) * 3);
    }
    return (*informacionparticulas);
}

int** leerbinario(FILE* archivo, int* contadorparticulas, int*** informacionparticulas) {
    char grupo[32];
    int cuenta = 0;
    (*informacionparticulas) = (int**)malloc(sizeof(int*));
    (*informacionparticulas)[0] = (int*)malloc(sizeof(int) * 3);

    while (fscanf(archivo, "%32s", grupo) == 1) {
        int decimal = 0;
        for (int i = 0; i < 32; i++) {
            if (grupo[i] == '1') {
                decimal += 1 << (31 - i);
            }
        }
        (*informacionparticulas)[*contadorparticulas][cuenta] = decimal;
        if (cuenta == 2){
            (*informacionparticulas)[*contadorparticulas][cuenta] %= 8;
        }
        if (feof(archivo)){
            break;
        }
        cuenta++;
        if (cuenta == 3){
            cuenta = 0;
            (*contadorparticulas)++;
            (*informacionparticulas) = realloc((*informacionparticulas), sizeof(int*) * ((*contadorparticulas) + 1));
            (*informacionparticulas)[*contadorparticulas] = (int*)malloc(sizeof(int) * 3);
        }
    }

    return *informacionparticulas;
}

int** leertxt(FILE *archivo, int *contadorparticulas, int ***informacionparticulas) {

    (*informacionparticulas) = (int**)malloc(sizeof(int*));
    (*informacionparticulas)[0] = (int*)malloc(sizeof(int) * 3);

    while (fgetc(archivo) != '(' && !feof(archivo)) {
            while (fscanf(archivo, "(%d,%d)", &(*informacionparticulas)[*contadorparticulas][0], &(*informacionparticulas)[*contadorparticulas][1]) == 2) {
            (*informacionparticulas)[*contadorparticulas][2] = rand() % 8;
            (*contadorparticulas)++;
            
            if (feof(archivo)) {
                break;
            }
            (*informacionparticulas) = realloc((*informacionparticulas), sizeof(int*) * ((*contadorparticulas) + 1));
            (*informacionparticulas)[*contadorparticulas] = (int*)malloc(sizeof(int) * 3);
        }
    }

    return *informacionparticulas;
}

int** visualizar(int contadorparticulas, int** informacionparticulas, SDL_Renderer* renderer,SDL_Rect *particulas){
    SDL_Event event;
    int corriendo = 1;
    int r = 0, g = 0, b = 0;
    while (corriendo) {
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_KEYDOWN) {
                if(event.key.keysym.sym == SDLK_q){
                    corriendo = 0;
                } else if (event.key.keysym.sym == SDLK_c) {
                    r = rand() % 256;
                    g = rand() % 256;
                    b = rand() % 256;
                    SDL_SetRenderDrawColor(renderer, r, g, b, 255);
                    SDL_RenderClear(renderer);
                } 
            }
        }
        SDL_SetRenderDrawColor(renderer, 255 - r, 255 - g, 255 - b, 255);
        for (int i = 0; i < contadorparticulas; i++){
            SDL_RenderFillRect(renderer, &particulas[i]);
        }
        
        SDL_RenderPresent(renderer);
    }
    return 0;
}

int main(int argc, char* argv[]) {
    char archivo[100];
    printf("\nIngrese el nombre de su archivo:\n");
    scanf("%s", archivo);
    srand(time(NULL));
    
    FILE *lectura = fopen(archivo, "r");
    if (lectura == NULL) {
        perror("Error al abrir el archivo");
        return -1;
    }


    int tipo = detectararchivo(lectura);
    int **informacionparticulas = NULL;
    int contadorparticulas = 0;

    if (tipo == 1) {
        informacionparticulas = leercsv(lectura, &contadorparticulas, &informacionparticulas);
    } else if (tipo == 2){
            informacionparticulas = leerbinario(lectura, &contadorparticulas, &informacionparticulas);
    } else if (tipo == 3){
            informacionparticulas = leertxt(lectura, &contadorparticulas, &informacionparticulas);
    }

    fclose(lectura);

    SDL_Window* ventana = NULL;
    SDL_Renderer* renderer = NULL;
    SDL_DisplayMode dimension;
    SDL_GetCurrentDisplayMode(0,&dimension);
    ventana = SDL_CreateWindow("HOLA", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, dimension.w, dimension.h, SDL_WINDOW_FULLSCREEN_DESKTOP);
    if (ventana == NULL) {
        printf("Error al crear la ventana: %s\n", SDL_GetError());
        SDL_Quit();
        return -1;
    }

    renderer = SDL_CreateRenderer(ventana, -1, SDL_RENDERER_ACCELERATED);
    if (renderer == NULL) {
        printf("Error al crear el renderer: %s\n", SDL_GetError());
        SDL_DestroyWindow(ventana);
        SDL_Quit();
        return -1;
    }
    SDL_Rect *particulas = (SDL_Rect*)malloc(sizeof(SDL_Rect)*contadorparticulas);
    for (int i = 0; i < contadorparticulas; i++){
        particulas[i].x = informacionparticulas[i][0];
        particulas[i].y = informacionparticulas[i][1];
        particulas[i].h = 10;
        particulas[i].w = 10;
    }
    visualizar(contadorparticulas, informacionparticulas, renderer,particulas);

    free(particulas);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(ventana);
    SDL_Quit();

    return 0;
}
