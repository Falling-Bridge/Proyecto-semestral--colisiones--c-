#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>
#include <ctype.h>
#include <time.h>

int detectararchivo(const char *path) {
    FILE *archivo = fopen(path, "r");
    if (archivo == NULL) {
        perror("Error al abrir el archivo");
        return -1;
    }
    
    bool csv = false, binario = false, txt = false;
    char caracter;
    
    while ((caracter = fgetc(archivo)) != EOF) {
        if (caracter == ';') {
            csv = true;
            binario = false;
            txt = false;
            break;
        } else if (caracter == '0' || caracter == '1') {
            csv = false;
            binario = true;
            txt = false;
        } else if (isalpha(caracter) || caracter == ' ' || (caracter >=2 && caracter <=9)) {
            csv = false;
            binario = false;
            txt = true;
            break;
        }
        
    }

    if (csv) {
        return 1;
    } else if (txt) {
        return 2;
    } else if (binario) {
        return 3;
    } else {
        return -1;
    }
}

int leercsv(const char *path, const char **direcciones) {
    FILE *archivo = fopen(path, "r");
    if (archivo == NULL) {
        perror("Error al abrir el archivo");
        return -1;
    }

    int numero1, numero2, numero3;
    char separador;

    char archivocreado[200];
    snprintf(archivocreado, sizeof(archivocreado), "coordenadas-tipo-csv");

    FILE *creado = fopen(archivocreado, "w");
    if (creado == NULL) {
        printf("No se pudo crear el archivo de estadísticas.\n");
        return 1;
    }

    while (fscanf(archivo, "%d,%d,%d%c", &numero1, &numero2, &numero3, &separador) == 4) {
        int direccion_index = numero3 % 8;
        fprintf(creado, "%d,%d,%s\n", numero1, numero2, direcciones[direccion_index]);
    }

    fclose(archivo);
    fclose(creado);
    return 0;
}

int leertxt(const char *path, long int *largo, const char **direcciones) {
    FILE *archivo = fopen(path, "r");
    if (archivo == NULL) {
        perror("Error al abrir el archivo");
        return -1;
    }

    char caracter;
    int numero = 0;
    int numeroEncontrado = 0;
    int num_count = 0;
    int numeros[*largo];
    srand(time(NULL));

    while ((caracter = fgetc(archivo)) != EOF) {
        if (isdigit(caracter)) {
            numero = numero * 10 + (caracter - '0');
            numeroEncontrado = 1;
        } else {
            if (numeroEncontrado) {
                numeros[num_count] = numero;
                num_count++;
                numero = 0;
                numeroEncontrado = 0;
            }
        }
    }

    fclose(archivo);

    char archivocreado[200];
    snprintf(archivocreado, sizeof(archivocreado), "coordenadas-tipo-txt");

    FILE *creado = fopen(archivocreado, "w");
    if (creado == NULL) {
        printf("No se pudo crear el archivo de estadísticas.\n");
        return 1;
    }

    for (int i = 0; i < num_count; i += 2) {
        int index = rand() % 8;
        fprintf(creado, "%d,%d,%s\n", numeros[i], numeros[i + 1], direcciones[index]);
    }

    fclose(creado); // Asegúrate de cerrar el archivo después de escribir en él.

    return 0;
}

int leerbinario(const char *path, const char **direcciones) {
    FILE *archivo = fopen(path, "rb");
    if (archivo == NULL) {
        perror("Error al abrir el archivo binario");
        return -1;
    }

    char archivocreado[200];
    snprintf(archivocreado, sizeof(archivocreado), "coordenadas-tipo-bin");

    FILE *creado = fopen(archivocreado, "w");
    if (creado == NULL) {
        printf("No se pudo crear el archivo de estadísticas.\n");
        return 1;
    }

    char grupo[32];
    int informacion_x = 0;
    int informacion_y = 0;
    int direccion = 0;
    int contador = 0;

    while (fread(grupo, 1, 32, archivo) == 32) {
        for (int i = 0; i < 32; i++) {
            if (contador % 3 == 0) {
                if (grupo[i] == '1') {
                    informacion_x |= (1 << (31 - i));
                }
            } else if (contador % 3 == 1) {
                if (grupo[i] == '1') {
                    informacion_y |= (1 << (31 - i));
                }
            } else {
                if (grupo[i] == '1') {
                    direccion |= (1 << (31 - i));
                    direccion %= 8;
                }
            }
        }

        if (contador % 3 == 2) {
            fprintf(creado, "%d,%d,%s\n", informacion_x, informacion_y, direcciones[direccion]);
            informacion_x = 0;
            informacion_y = 0;
            direccion = 0;
        }

        contador++;
    }

    fclose(archivo);
    fclose(creado);
    return 0;
}

int main() {
    char archivo[100];
    printf("\nIngrese el nombre de su archivo:\n");
    scanf("%s", archivo);

    FILE *lectura = fopen(archivo, "r");
    if (lectura == NULL) {
        perror("Error al abrir el archivo");
        return -1;
    }

    int tipo = detectararchivo(archivo);

    fseek(lectura, 0, SEEK_END);
    long int largo = ftell(lectura);
    rewind(lectura);
    const char *direcciones[] = {"r", "ur", "uc", "ul", "l", "dl", "dc", "dr"};

    switch (tipo) {
        case 1:
            if (leercsv(archivo, direcciones) == 0) {
                printf("Se han guardado las coordenadas en el archivo 'coordenadas-tipo-csv\n");
            }
            break;
        case 2:
            if (leertxt(archivo, &largo, direcciones) == 0) {
                printf("Se han guardado las coordenadas en el archivo 'coordenadas-tipo-txt'\n");
            }
            break;
        case 3:
            if (leerbinario(archivo, direcciones) == 0) {
                printf("Se han guardado las coordenadas en el archivo 'coordenadas-tipo-bin'\n");
            }
            break;
    }
    fclose(lectura);
}
